<!DOCTYPE html>
<html>
	<head>
		<meta charset='utf-8' />
		<style>
			/** TODO: adicionar o reset */
			#ball {
				width: 32px; height: 32px;
				border-radius: 10px;
				background: url('img/quack.png');
			}

			html, body, #board {
				width: 100%; height: 100%;
				border: 0; padding: 0; margin: 0;
			}

      #board {
				border: 5px solid red;
				-moz-box-sizing: border-box;
        background:
          linear-gradient(135deg, #69D2E7 25%, transparent 25%) -25px 0,
          linear-gradient(225deg, #69D2E7 25%, transparent 25%) -25px 0,
          linear-gradient(45deg, #69D2E7 25%, transparent 25%),
          linear-gradient(315deg, #69D2E7 25%, transparent 25%);

        background-color: #A7DBD8;

        animation: wave 2s; 
        animation-iteration-count: infinite;
        animation-direction: alternate;
      }   

      @keyframes wave {
        from {
          background:
            linear-gradient(135deg, #69D2E7 25%, transparent 25%) -20px 0,
            linear-gradient(225deg, #69D2E7 25%, transparent 25%) -20px 0,
            linear-gradient(315deg, #69D2E7 25%, transparent 25%),
            linear-gradient(45deg, #69D2E7 25%, transparent 25%);
          background-size: 40px 40px;
        }   

        to {
          background:
            linear-gradient(135deg, #69D2E7 25%, transparent 25%) -40px 0,
            linear-gradient(225deg, #69D2E7 25%, transparent 25%) -40px 0,
            linear-gradient(315deg, #69D2E7 25%, transparent 25%) -20px 0,
            linear-gradient(45deg, #69D2E7 25%, transparent 25%) -20px 0;
          background-size: 40px 40px;
        }   
      }
		</style>
	</head>
	<body>
		<div id='board'>
			<div id='ball'></div>
		</div>
		<script>
			var acceleration = [0, 0], interval = 100;

			var ball = {
				dom: document.getElementById('ball'),
								// x, y
				velocity: [0, 0],
				position: [0, 0]
			}

                        function handleOrientation(event) {
                                var x = event.beta;  // In degree in the range [-180,180]
                                var y = event.gamma; // In degree in the range [-90,90]

                                output.innerHTML  = "beta : " + x + "\n";
                                output.innerHTML += "gamma: " + y + "\n";

                                // Because we don't want to have the device upside down
                                // We constrain the x value to the range [-90,90]
                                if (x >  90) { x =  90};
                                if (x < -90) { x = -90};

                                // To make computation easier we shift the range of 
                                // x and y to [0,180]
                                x += 90;
                                y += 90;

                                // 10 is half the size of the ball
                                // It center the positionning point to the center of the ball
                                ball.style.top  = (maxX*x/180 - 10) + "px";
                                ball.style.left = (maxY*y/180 - 10) + "px";
                        }

			function initDesktop() {
				document.addEventListener('keyup', function(evt) {
					var mod = 15;

					if (evt.keyCode == evt.DOM_VK_RIGHT) {
						acceleration[0] += mod;
					}
					else if (evt.keyCode == evt.DOM_VK_LEFT) {
						acceleration[0] -= mod;
					}
					else if (evt.keyCode == evt.DOM_VK_UP) {
						acceleration[1] -= mod;
					}
					else if (evt.keyCode == evt.DOM_VK_DOWN) {
						acceleration[1] += mod;
					}
				});
			}

			function update() {
				ball.dom.style.left = ball.position[0] + 'px';
				ball.dom.style.top = ball.position[1] + 'px';
			}

			function hit(ball) {
				// TODO:
				return false;
			}

			function loop(timestamp) {
				if (loop.timestamp === undefined) {
					loop.timestamp = timestamp;
					return;
				}
				var diff = (timestamp - loop.timestamp) / 1000;
				loop.timestamp = timestamp;

				ball.position[0] += ball.velocity[0] * diff + (diff * acceleration[0]) / 2;
				ball.position[1] += ball.velocity[1] * diff + (diff * acceleration[1]) / 2;

				ball.velocity[0] += diff * acceleration[0];
				ball.velocity[1] += diff * acceleration[1];

				// TODO: take angle into consideration
				if (hit(ball)) {
					acceleration = [0, 0];
					ball.velocity = [0, 0];
				}

				update();
			}

                        function initMobile() {
                            window.addEventListener('devicemotion', function(event) {
                                console.log(event.acceleration.x + ' m/s2');
                            });
   //                             window.addEventListener('deviceorientation', handleOrientation);
                        }

			function initTimer() {
				{
					var start = window.mozAnimationStartTime; // Date.now()

					!function _requestFrame(timestamp) {
						loop(timestamp);
						window.mozRequestAnimationFrame(_requestFrame);
					}(start);
				}
				/*
				{
					var count = 0;
					window.setInterval(function(){ loop(interval * count++), interval);
				}
				*/
			}

			function initElements() {
				ball.dom.parentElement.style.position = 'relative';
				var style = ball.dom.style;
				
				style.position = 'absolute';
				// style.transition = 'left ' + interval + 'ms';
			}
			
			window.onload = function() {
				initElements();
				//initDesktop();//uses keyboard
                                initMobile();//uses accelerometer
				initTimer();
			}
		</script>
	</body>
</html>
